"""Interface graphique principale de l'application"""
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import cv2
from PIL import Image, ImageTk
import logging
from datetime import datetime
from pathlib import Path
import sys
import customtkinter as ctk

# Ajouter le dossier racine au PYTHONPATH
RACINE = Path(__file__).resolve().parent.parent.parent
if str(RACINE) not in sys.path:
    sys.path.append(str(RACINE))

from src.config.config_base import CONFIG_GUI, DOSSIER_CAPTURES
from src.core.camera import GestionnaireCamera
from src.core.detection import DetecteurVisages
from src.core.voix import AssistantVocal

class Application(ctk.CTk):
    """Application principale"""
    
    def __init__(self):
        """Initialise l'application"""
        super().__init__()
        
        # Configuration de la fen√™tre
        self.title(CONFIG_GUI['titre'])
        self.geometry(f"{CONFIG_GUI['largeur']}x{CONFIG_GUI['hauteur']}")
        
        # Composants principaux
        self.camera = GestionnaireCamera()
        self.detecteur = DetecteurVisages()
        self.assistant = AssistantVocal()
        
        # Variables
        self.detection_active = False
        self.camera_active = False
        
        # Interface
        self._creer_interface()
        
        # D√©marrer la mise √† jour
        self._update_interface()
        
    def _creer_interface(self):
        """Cr√©e l'interface graphique"""
        # Frame principale
        self.frame_principale = ctk.CTkFrame(self)
        self.frame_principale.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Frame vid√©o (gauche)
        self.frame_video = ctk.CTkFrame(self.frame_principale)
        self.frame_video.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Label vid√©o
        self.label_video = ctk.CTkLabel(self.frame_video, text="")
        self.label_video.pack(fill=tk.BOTH, expand=True)
        
        # Frame contr√¥les (droite)
        self.frame_controles = ctk.CTkFrame(self.frame_principale)
        self.frame_controles.pack(side=tk.RIGHT, fill=tk.Y, padx=5, pady=5)
        
        # Liste des profils
        self.frame_profils = ctk.CTkFrame(self.frame_controles)
        self.frame_profils.pack(fill=tk.X, padx=5, pady=5)
        
        ctk.CTkLabel(self.frame_profils, text="Profils").pack()
        
        self.liste_profils = tk.Listbox(self.frame_profils, bg='#2b2b2b', fg='white',
                                      selectmode=tk.SINGLE, height=10)
        self.liste_profils.pack(fill=tk.X, padx=5, pady=5)
        
        # Boutons profils
        self.frame_boutons_profils = ctk.CTkFrame(self.frame_profils)
        self.frame_boutons_profils.pack(fill=tk.X, padx=5, pady=5)
        
        self.btn_ajouter = ctk.CTkButton(self.frame_boutons_profils, text="+ Ajouter",
                                        command=self._on_ajouter_profil)
        self.btn_ajouter.pack(side=tk.LEFT, padx=5)
        
        self.btn_supprimer = ctk.CTkButton(self.frame_boutons_profils, text="- Supprimer",
                                          command=self._on_supprimer_profil)
        self.btn_supprimer.pack(side=tk.RIGHT, padx=5)
        
        # S√©lection cam√©ra
        self.frame_camera = ctk.CTkFrame(self.frame_controles)
        self.frame_camera.pack(fill=tk.X, padx=5, pady=5)
        
        ctk.CTkLabel(self.frame_camera, text="S√©lectionner une cam√©ra:").pack()
        
        self.combo_camera = ttk.Combobox(self.frame_camera, values=self.camera.liste_cameras())
        if self.camera.liste_cameras():
            self.combo_camera.set(self.camera.liste_cameras()[0])
        self.combo_camera.pack(fill=tk.X, padx=5, pady=5)
        
        # Boutons contr√¥le
        self.btn_camera = ctk.CTkButton(self.frame_controles, text="‚ñ∂ D√©marrer Cam√©ra",
                                       command=self._on_toggle_camera)
        self.btn_camera.pack(fill=tk.X, padx=5, pady=5)
        
        self.btn_detection = ctk.CTkButton(self.frame_controles, text="üîç Activer D√©tection",
                                          command=self._on_toggle_detection)
        self.btn_detection.pack(fill=tk.X, padx=5, pady=5)
        
        self.btn_vocal = ctk.CTkButton(self.frame_controles, text="üîä Activer Assistant Vocal",
                                      command=self._on_toggle_vocal)
        self.btn_vocal.pack(fill=tk.X, padx=5, pady=5)
        
        # Historique
        self.frame_historique = ctk.CTkFrame(self.frame_controles)
        self.frame_historique.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        ctk.CTkLabel(self.frame_historique, text="Historique").pack()
        
        self.historique = tk.Text(self.frame_historique, height=10, bg='#2b2b2b',
                                fg='white', wrap=tk.WORD)
        self.historique.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Frame captures
        self.frame_captures = ctk.CTkFrame(self.frame_controles)
        self.frame_captures.pack(fill=tk.X, padx=5, pady=5)
        
        ctk.CTkLabel(self.frame_captures, text="Derni√®re capture").pack()
        
        self.label_capture = ctk.CTkLabel(self.frame_captures, text="")
        self.label_capture.pack(fill=tk.X, padx=5, pady=5)
        
        # Charger les profils existants
        self._charger_profils()
        
    def _charger_profils(self):
        """Charge la liste des profils"""
        self.liste_profils.delete(0, tk.END)
        for nom in self.detecteur.noms_connus:
            self.liste_profils.insert(tk.END, nom)
            
    def _update_interface(self):
        """Met √† jour l'interface"""
        if self.camera_active:
            # Lire la frame
            ret, frame = self.camera.lire_frame()
            if ret:
                # D√©tecter les visages si activ√©
                if self.detection_active:
                    frame = self.detecteur.detecter(frame)
                    
                # Convertir pour affichage
                image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                image = Image.fromarray(image)
                photo = ImageTk.PhotoImage(image=image)
                
                # Mettre √† jour l'affichage
                self.label_video.configure(image=photo)
                self.label_video.image = photo
                
        # Planifier la prochaine mise √† jour
        self.after(10, self._update_interface)
        
    def _on_toggle_camera(self):
        """Gestion du bouton cam√©ra"""
        if not self.camera_active:
            # D√©marrer la cam√©ra
            camera_index = self.combo_camera.current()
            if self.camera.demarrer_camera(camera_index):
                self.camera_active = True
                self.btn_camera.configure(text="‚èπ Arr√™ter Cam√©ra")
                self._ajouter_historique("Cam√©ra d√©marr√©e")
        else:
            # Arr√™ter la cam√©ra
            self.camera.arreter_camera()
            self.camera_active = False
            self.btn_camera.configure(text="‚ñ∂ D√©marrer Cam√©ra")
            self._ajouter_historique("Cam√©ra arr√™t√©e")
            
    def _on_toggle_detection(self):
        """Gestion du bouton d√©tection"""
        self.detection_active = not self.detection_active
        if self.detection_active:
            self.btn_detection.configure(text="‚èπ D√©sactiver D√©tection")
            self._ajouter_historique("D√©tection activ√©e")
        else:
            self.btn_detection.configure(text="üîç Activer D√©tection")
            self._ajouter_historique("D√©tection d√©sactiv√©e")
            
    def _on_toggle_vocal(self):
        """Gestion du bouton assistant vocal"""
        if not self.assistant.actif:
            self.assistant.activer()
            self.btn_vocal.configure(text="üîá D√©sactiver Assistant Vocal")
            self._ajouter_historique("Assistant vocal activ√©")
        else:
            self.assistant.desactiver()
            self.btn_vocal.configure(text="üîä Activer Assistant Vocal")
            self._ajouter_historique("Assistant vocal d√©sactiv√©")
            
    def _on_ajouter_profil(self):
        """Ajoute un nouveau profil"""
        if not self.camera_active:
            messagebox.showerror("Erreur", "Veuillez d√©marrer la cam√©ra d'abord")
            return
            
        nom = simpledialog.askstring("Nouveau profil", "Nom du profil:")
        if nom:
            ret, frame = self.camera.lire_frame()
            if ret and self.detecteur.ajouter_visage(nom, frame):
                self._charger_profils()
                self._ajouter_historique(f"Profil ajout√©: {nom}")
                self.assistant.parler(f"Nouveau profil ajout√© : {nom}")
            else:
                messagebox.showerror("Erreur", "Impossible d'ajouter le profil")
                
    def _on_supprimer_profil(self):
        """Supprime un profil"""
        selection = self.liste_profils.curselection()
        if not selection:
            messagebox.showerror("Erreur", "Veuillez s√©lectionner un profil")
            return
            
        nom = self.liste_profils.get(selection[0])
        if messagebox.askyesno("Confirmation", f"Supprimer le profil {nom} ?"):
            if self.detecteur.supprimer_visage(nom):
                self._charger_profils()
                self._ajouter_historique(f"Profil supprim√©: {nom}")
                self.assistant.parler(f"Profil supprim√© : {nom}")
            else:
                messagebox.showerror("Erreur", "Impossible de supprimer le profil")
                
    def _ajouter_historique(self, message: str):
        """Ajoute un message √† l'historique"""
        horodatage = datetime.now().strftime("%H:%M:%S")
        self.historique.insert("1.0", f"{horodatage} - {message}\n")
        
    def on_closing(self):
        """Gestion de la fermeture de l'application"""
        self.camera.arreter_camera()
        self.destroy()
        
if __name__ == "__main__":
    # Configuration du logging
    logging.basicConfig(level=logging.INFO,
                       format='%(asctime)s - %(levelname)s - %(message)s')
    
    # Lancer l'application
    app = Application()
    app.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.mainloop()
